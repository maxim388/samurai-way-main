{"version":3,"file":"static/js/3.140c8de6.chunk.js","mappings":"kOASMA,EAAkB,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAIhB,SAASE,EAAoBC,GAMlC,OAAOC,EAAAA,EAAAA,IAAQN,EAARM,EALmB,SAACC,GACMA,EAAzBL,OAAN,IAAiBM,GAAjB,OAA+BD,EAA/B,GACA,OAAKA,EAAML,QACJ,SAACG,GAAD,UAAgBG,KADG,SAAC,KAAD,CAAUC,GAAI,gB,yFCjB5C,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,SCKnKC,EAAY,SAACH,GACxB,OAAO,gBAAKI,UAAWC,EAAAA,QAAhB,SAA4BL,EAAMM,W,UCE9BC,EAAa,SAACP,GACzB,OACE,gBAAKI,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACE,SAAC,KAAD,CAASH,GAAE,mBAAcF,EAAMQ,IAA/B,SAAsCR,EAAMS,U,uCCA5CC,GAAcC,EAAAA,EAAAA,GAAiB,IA2C/BC,GAAuBC,EAAAA,EAAAA,GAAwB,CACnDC,KAAM,wBADqBD,EAzCgC,SAACb,GAC5D,OACE,kBAAMe,SAAUf,EAAMgB,aAAtB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXV,KAAM,iBACNW,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUZ,QAGzB,0BACE,6C,oBCeR,GALyBa,EAAAA,EAAAA,KACvBxB,EAAAA,EAAAA,KAfsB,SAACL,GACvB,MAAO,CACL8B,QAAS9B,EAAM+B,YAAYD,QAC3BE,SAAUhC,EAAM+B,YAAYC,aAGL,SAACC,GAC1B,MAAO,CACLC,kBAAmB,SAACC,GAClBF,GAASG,EAAAA,EAAAA,GAAcD,SAO3BhC,EAAAA,EAFuB0B,EDJF,SAACvB,GACtB,IAAM+B,EAAkB/B,EAAMwB,QAAQQ,KAAI,SAACC,GACzC,OAAO,SAAC1B,EAAD,CAAuBE,KAAMwB,EAAExB,KAAMD,GAAIyB,EAAEzB,IAA1ByB,EAAEzB,OAEtB0B,EAAmBlC,EAAM0B,SAASM,KAAI,SAACG,GAC3C,OAAO,SAAChC,EAAD,CAAsBG,QAAS6B,EAAE7B,SAAjB6B,EAAE3B,OAO3B,OACE,iBAAKJ,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiC0B,KACjC,iBAAK3B,UAAWC,EAAAA,SAAhB,WACE,+BAAO6B,MACP,SAACtB,EAAD,CAAsBG,SATN,SAACqB,GACrBpC,EAAM4B,kBAAkBQ,EAAOP","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way-main/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n    return <Component {...(restProps as T)} />; //IntrinsicAttributes\r\n  };\r\n  return connect(mapStateToProps)(RedirectComponent);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__3QajW\",\"dialogsItems\":\"Dialogs_dialogsItems__kYZ4Q\",\"active\":\"Dialogs_active__BeXmA\",\"messages\":\"Dialogs_messages__Od8OT\",\"message\":\"Dialogs_message__ENFc3\"};","import s from \"./../Dialogs.module.css\";\r\n\r\nexport type MessagePropsType = {\r\n  message: string;\r\n};\r\n\r\nexport const Mesassage = (props: MessagePropsType) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\n","import { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\nexport type DialogItemPropsType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n","import s from \"./Dialogs.module.css\";\r\nimport { Mesassage } from \"./Message/Message\";\r\nimport { DialogItem } from \"./DialogItem/DialogItem\";\r\nimport { DialogsPropsType } from \"./DialogsContainer\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { FC } from \"react\";\r\n\r\ntype FormDataType = {\r\n  newMessageText: string;\r\n};\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMeessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={\"newMessageText\"}\r\n          placeholder={\"Enter your message\"}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n  const gialogsElements = props.dialogs.map((d) => {\r\n    return <DialogItem key={d.id} name={d.name} id={d.id} />;\r\n  });\r\n  const messagesElements = props.messages.map((m) => {\r\n    return <Mesassage key={m.id} message={m.message} />;\r\n  });\r\n\r\n  const addNewMessage = (values: FormDataType) => {\r\n    props.onSendMesageClick(values.newMessageText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{gialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div> {messagesElements}</div>\r\n        <AddMeessageFormRedux onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMeessageFormRedux = reduxForm<FormDataType>({\r\n  form: \"dialogAddMessageForm\",\r\n})(AddMeessageForm);\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  DialogDataType,\r\n  MessagesDataType,\r\n  sendMessageAC,\r\n} from \"../../reducers/dialogs-reducer\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport { Dialogs } from \"./Dialogs\";\r\nimport { Dispatch, compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n  dialogs: Array<DialogDataType>;\r\n  messages: Array<MessagesDataType>;\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  onSendMesageClick: (newMessageText: string) => void;\r\n};\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    onSendMesageClick: (newMessageText: string) => {\r\n      dispatch(sendMessageAC(newMessageText));\r\n    },\r\n  };\r\n};\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;\r\n"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Mesassage","className","s","message","DialogItem","id","name","maxLength50","maxLengthCreator","AddMeessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","dialogs","dialogsPage","messages","dispatch","onSendMesageClick","newMessageText","sendMessageAC","gialogsElements","map","d","messagesElements","m","values"],"sourceRoot":""}