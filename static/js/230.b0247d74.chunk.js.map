{"version":3,"file":"static/js/230.b0247d74.chunk.js","mappings":"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","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way-main/./src/components/Profile/MyPost/MyPost.module.css?5bea","webpack://samurai-way-main/./src/components/Profile/MyPost/Post/Post.module.css?5715","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","webpack://samurai-way-main/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppRootStateType } from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n    return <Component {...(restProps as T)} />; //IntrinsicAttributes\r\n  };\r\n  return connect(mapStateToProps)(RedirectComponent);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__Ey7ZZ\",\"posts\":\"MyPost_posts__82GL4\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__OPaw3\"};","import s from \"./Post.module.css\";\r\n\r\nexport type PostPropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        alt={\"avatar\"}\r\n        src={\r\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQYGPsjyMt1h-2yQhEh-bxGUvIpz6SSfEsVSf27WgwCkaCaNr9WSpVx78g&usqp=CAU\"\r\n        }\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span>Like: {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import s from \"./MyPost.module.css\";\r\nimport { Post } from \"./Post/Post\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { MyPostContainerPropsType } from \"./MyPostContainer\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport React, { memo } from \"react\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { FC } from \"react\";\r\n\r\ntype FormDataType = {\r\n  newPostText: string;\r\n};\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport const MyPost: FC<MyPostContainerPropsType> = memo((props) => {\r\n  const addPost = (values: FormDataType) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n  return (\r\n    <div className={s.postBlock}>\r\n      <h3>My Post</h3>\r\n      <AddNewPostReduxForm onSubmit={addPost} />\r\n      <div className={s.posts}>\r\n        {props.posts.map((p) => {\r\n          return (\r\n            <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={\"newPostText\"}\r\n          placeholder={\"Post message\"}\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({\r\n  form: \"profileAddNewPostForm\",\r\n})(AddNewPostForm);\r\n","import { connect } from \"react-redux\";\r\nimport { PostDataType, addPostAC } from \"../../../reducers/profile-reducer\";\r\nimport { AppRootStateType } from \"../../../redux/redux-store\";\r\nimport { MyPost } from \"./MyPost\";\r\nimport { Dispatch } from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n  posts: Array<PostDataType>;\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nexport type MyPostContainerPropsType = MapStateToPropsType &\r\n  MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    addPost: (newPostText: string) => {\r\n      dispatch(addPostAC(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nexport const MyPostContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MyPost);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"desctiptionBlock\":\"ProfileInfo_desctiptionBlock__aXmMB\"};","import { FC, useState, useEffect, ChangeEvent } from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n  status: string;\r\n  updateStatusTC: (status: string) => Function;\r\n};\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusType> = (props) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n  const [status, setStatus] = useState<string>(props.status);\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n    return () => {};\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatusTC(status);\r\n  };\r\n  return (\r\n    <div>\r\n      {editMode ? (\r\n        <div>\r\n          <input\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n            onChange={(e) => onStatusChange(e)}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>{status || \"------\"}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { UserProfileType } from \"../../../reducers/profile-reducer\";\r\nimport { Preloader } from \"../../common/Preloader\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { ProfileStatus } from \"./ProfileStatus\";\r\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\r\nimport { FC } from \"react\";\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: null | UserProfileType;\r\n  status: string;\r\n  updateStatusTC: (status: string) => Function;\r\n};\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatusTC,\r\n}) => {\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div></div>\r\n        <div className={s.desctiptionBlock}>\r\n          <img src={profile?.photos.large} alt=\"ava\" />\r\n          <ProfileStatusWithHooks\r\n            status={status}\r\n            updateStatusTC={updateStatusTC}\r\n          />\r\n          {/* <ProfileStatus status={status} updateStatusTC={updateStatusTC} /> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import { UserProfileType } from \"../../reducers/profile-reducer\";\r\nimport { MyPostContainer } from \"./MyPost/MyPostContainer\";\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\r\nimport {FC} from \"react\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n  profile: null | UserProfileType;\r\n  status: string;\r\n  updateStatusTC: (status: string) => Function;\r\n};\r\n\r\nexport const Profile: FC<ProfilePropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo {...props} />\r\n      <MyPostContainer />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Profile } from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  UserProfileType,\r\n  getStatusTC,\r\n  getUserProfileTC,\r\n  setUserProfileAC,\r\n  updateStatusTC,\r\n} from \"../../reducers/profile-reducer\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\r\n\r\ntype ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\ntype MapStateToPropsType = {\r\n  profile: null | UserProfileType;\r\n  status: string;\r\n  autorizedUserId: null | number;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  setUserProfile: (profile: UserProfileType) => void;\r\n  getUserProfileTC: (userId: number) => Function;\r\n  getStatusTC: (userId: number) => Function;\r\n  updateStatusTC: (status: string) => Function;\r\n};\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType;\r\n\r\nexport class ProfileAPIContainer extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    let userId: number;\r\n    if (this.props.match.params.userId) {\r\n      userId = Number(this.props.match.params.userId);\r\n    } else {\r\n      if (this.props.autorizedUserId) {\r\n        userId = this.props.autorizedUserId;\r\n      } else {\r\n        this.props.history.push(\"/login\");\r\n        return;\r\n      }\r\n    }\r\n    this.props.getUserProfileTC(userId); //? зачем?\r\n    this.props.getStatusTC(userId); //? зачем?\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatusTC={this.props.updateStatusTC}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsType = {\r\n  setUserProfile: setUserProfileAC,\r\n  getUserProfileTC: getUserProfileTC,\r\n  getStatusTC: getStatusTC,\r\n  updateStatusTC: updateStatusTC,\r\n};\r\n\r\nconst ProfileContainer = compose<React.ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileAPIContainer);\r\n\r\nexport default ProfileContainer;"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Post","className","s","alt","src","message","likesCount","maxLength10","maxLengthCreator","MyPost","memo","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","posts","map","p","id","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostContainer","profilePage","dispatch","addPostAC","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onBlur","updateStatusTC","value","onChange","e","currentTarget","onStatusChange","onDoubleClick","ProfileInfo","profile","photos","large","Preloader","Profile","ProfileAPIContainer","userId","this","match","params","Number","autorizedUserId","history","push","getUserProfileTC","getStatusTC","React","mapDispatchToProps","setUserProfile","setUserProfileAC","compose","withRouter"],"sourceRoot":""}